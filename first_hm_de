--задание 1
create table users(
	id integer primary key,
	name character varying(100) not null,
	email character varying(150) not null,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
INSERT INTO users (id, name, email, created_at) VALUES
(1, 'Иван Иванов', 'ivan@example.com', '2023-01-15 10:00:00'),
(2, 'Петр Петров', 'petr@example.com', '2023-02-10 11:00:00'),
(3, 'Сидор Сидоров', 'sidor@example.com', '2023-03-05 12:00:00'),
(4, 'Анна Аннова', 'anna@example.com', '2023-04-20 13:00:00'),
(5, 'Мария Морина', 'maria@example.com', '2023-05-25 14:00:00'),
(6, 'Дементий Деменьтев', 'dementiy@example.com', '2023-01-07 17:00:00')

select * from users; 

--задание 2
create table categories(
	id integer primary key,
	name character(100)
);
insert into categories (id, name) values
(1, 'Электроника'),
(2, 'Одежда'),
(3, 'Книги'),
(4, 'Мебель'),
(5, 'Спорт');
select *from categories; 

--задание 3
create table products(
	id integer primary key,
	name character(100),
	price numeric(10,2),
	category_id integer
)
select * from products;
INSERT INTO products (id, name, price, category_id) VALUES
(1, 'Смартфон', 29999.99, 1),
(2, 'Ноутбук', 59999.99, 1),
(3, 'Футболка', 1999.99, 2),
(4, 'Джинсы', 4999.99, 2),
(5, 'Книга "SQL для начинающих"', 999.99, 3),
(6, 'Книга "Python для профессионалов"', 1499.99, 3),
(7, 'Диван', 29999.99, 4),
(8, 'Стул', 4999.99, 4),
(9, 'Велосипед', 19999.99, 5),
(10, 'Гантели', 2999.99, 5);

--задание 4
create table orders(
	id integer primary key,
	user_id integer,
	status character(50),
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO orders (id, user_id, status, created_at) VALUES
(1, 1, 'Оплачен', '2023-01-20 10:00:00'),
(2, 2, 'Ожидает оплаты', '2023-02-15 11:00:00'),
(3, 3, 'Доставлен', '2023-03-10 12:00:00'),
(4, 4, 'Оплачен', '2023-04-05 13:00:00'),
(5, 5, 'Ожидает оплаты', '2023-05-01 14:00:00'),
(6, 1, 'Доставлен', '2023-01-25 15:00:00'),
(7, 2, 'Оплачен', '2023-02-20 16:00:00'),
(8, 3, 'Ожидает оплаты', '2023-03-15 17:00:00'),
(9, 4, 'Доставлен', '2023-04-10 18:00:00'),
(10, 5, 'Оплачен', '2023-05-05 19:00:00'),
(11, 1, 'Ожидает оплаты', '2023-01-30 20:00:00'),
(12, 2, 'Доставлен', '2023-03-25 21:00:00'),
(13, 3, 'Оплачен', '2023-03-20 22:00:00'),
(14, 4, 'Ожидает оплаты', '2023-04-15 23:00:00'),
(15, 5, 'Доставлен', '2023-05-10 10:00:00'),
(16, 1, 'Оплачен', '2023-01-05 11:00:00'),
(17, 2, 'Ожидает оплаты', '2023-02-28 12:00:00'),
(18, 3, 'Доставлен', '2023-03-25 13:00:00'),
(19, 4, 'Оплачен', '2023-04-20 14:00:00'),
(20, 5, 'Ожидает оплаты', '2023-06-15 15:00:00');

select *from orders;

-- 5задание
create table order_items(
	id integer primary key,
	order_id integer,
	product_id integer,
	quantity integer
)
INSERT INTO order_items (id, order_id, product_id, quantity) VALUES
(1, 1, 1, 1),
(2, 1, 2, 1),
(3, 2, 3, 2),
(4, 2, 4, 1),
(5, 3, 5, 1),
(6, 3, 6, 1),
(7, 4, 7, 1),
(8, 4, 8, 2),
(9, 5, 9, 1),
(10, 5, 10, 1),
(11, 6, 1, 1),
(12, 6, 3, 1),
(13, 7, 2, 1),
(14, 7, 4, 1),
(15, 8, 5, 1),
(16, 8, 7, 1),
(17, 9, 6, 1),
(18, 9, 8, 1),
(19, 10, 9, 1),
(20, 10, 10, 1),
(21, 11, 1, 1),
(22, 11, 2, 1),
(23, 12, 3, 1),
(24, 12, 4, 1),
(25, 13, 5, 1),
(26, 13, 6, 1),
(27, 14, 7, 1),
(28, 14, 8, 1),
(29, 15, 9, 1),
(30, 15, 10, 1),
(31, 16, 1, 1),
(32, 16, 3, 1),
(33, 17, 2, 1),
(34, 17, 4, 1),
(35, 18, 5, 1),
(36, 18, 7, 1),
(37, 19, 6, 1),
(38, 19, 8, 1),
(39, 20, 9, 1),
(40, 20, 10, 1);
select *from order_items;

--6 задание
create table payments(
	id integer primary key,
	order_id integer,
	amount numeric(10, 2),
	payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
INSERT INTO payments (id, order_id, amount, payment_date) VALUES
(1, 1, 89999.98, '2023-01-20 10:05:00'),
(2, 2, 8999.97, NULL),
(3, 3, 2499.98, '2023-03-10 12:05:00'),
(4, 4, 39999.97, '2023-04-05 13:05:00'),
(5, 5, 22999.98, NULL),
(6, 6, 31999.98, '2023-01-25 15:05:00'),
(7, 7, 64999.98, '2023-02-20 16:05:00'),
(8, 8, 30999.98, NULL),
(9, 9, 6499.98, '2023-04-10 18:05:00'),
(10, 10, 22999.98, '2023-05-05 19:05:00'),
(11, 11, 89999.98, NULL),
(12, 12, 6999.98, '2023-02-25 21:05:00'),
(13, 13, 2499.98, '2023-03-20 22:05:00'),
(14, 14, 34999.98, NULL),
(15, 15, 22999.98, '2023-05-10 10:05:00'),
(16, 16, 31999.98, '2023-01-05 11:05:00'),
(17, 17, 64999.98, NULL),
(18, 18, 30999.98, '2023-03-25 13:05:00'),
(19, 19, 6499.98, '2023-04-20 14:05:00'),
(20, 20, 22999.98, NULL);
select *from payments;



-- 2 часть
-- задание 1
WITH order_totals AS (
    SELECT
        o.id AS order_id,
        c.name AS category_name,
        SUM(oi.quantity * p.price) AS total_amount
    FROM
        orders o
    JOIN
        order_items oi ON o.id = oi.order_id
    JOIN
        products p ON oi.product_id = p.id
    JOIN
        categories c ON p.category_id = c.id
    WHERE
        o.created_at >= '2023-03-01' AND o.created_at < '2023-04-01'
    GROUP BY
        o.id, c.name
)
SELECT
    category_name,
    AVG(total_amount) AS avg_order_amount
FROM
    order_totals
GROUP BY
    category_name;


--2 задание
WITH paid_orders AS (
    SELECT 
        o.id AS order_id,
        o.user_id,
        p.amount
    FROM 
        orders o
    JOIN 
        payments p ON o.id = p.order_id
    WHERE 
        o.status = 'Оплачен'
),
user_spending AS (
    SELECT 
        u.id AS user_id,
        u.name AS user_name,
        SUM(po.amount) AS total_spent
    FROM 
        paid_orders po
    JOIN 
        users u ON po.user_id = u.id
    GROUP BY 
        u.id, u.name
),
ranked_users AS (
    SELECT 
        user_name,
        total_spent,
        RANK() OVER (ORDER BY total_spent DESC) AS user_rank
    FROM 
        user_spending
)
SELECT 
    user_name,
    total_spent,
    user_rank
FROM 
    ranked_users
WHERE 
    user_rank <= 3
ORDER BY 
    user_rank;

-- 3 задание
SELECT 
    TO_CHAR(o.created_at, 'YYYY-MM') AS month,
    COUNT(DISTINCT o.id) AS total_orders,
    COALESCE(SUM(p.amount), 0) AS total_payments
FROM 
    orders o
LEFT JOIN 
    payments p ON o.id = p.order_id
WHERE 
    o.created_at >= '2023-01-01' AND o.created_at < '2024-01-01'
GROUP BY 
    TO_CHAR(o.created_at, 'YYYY-MM')
ORDER BY 
    month;

-- 4 задание
WITH total_sales AS (
    SELECT 
        SUM(quantity) AS total_quantity
    FROM 
        order_items
),
product_sales AS (
    SELECT 
        p.name AS product_name,
        SUM(oi.quantity) AS total_sold
    FROM 
        order_items oi
    JOIN 
        products p ON oi.product_id = p.id
    GROUP BY 
        p.name
)
SELECT 
    ps.product_name,
    ps.total_sold,
    ROUND((ps.total_sold * 100.0 / ts.total_quantity), 2) AS sales_percentage
FROM 
    product_sales ps,
    total_sales ts
ORDER BY 
    ps.total_sold DESC
LIMIT 5;

-- 5 задание
WITH user_total_spent AS (
    SELECT
        u.id AS user_id,
        u.name AS user_name,
        SUM(p.amount) AS total_spent
    FROM
        users u
    JOIN orders o ON u.id = o.user_id
    JOIN payments p ON o.id = p.order_id
    WHERE
        o.status = 'Оплачен'
    GROUP BY
        u.id, u.name
),
avg_total_spent AS (
    SELECT
        AVG(total_spent) AS avg_spent
    FROM
        user_total_spent
)
SELECT
    uts.user_name,
    uts.total_spent
FROM
    user_total_spent uts
CROSS JOIN avg_total_spent ats
WHERE
    uts.total_spent > ats.avg_spent;

-- 6 задание 
WITH ProductSales AS (
    SELECT
        c.name AS category_name,
        p.name AS product_name,
        SUM(oi.quantity) AS total_sold,
        ROW_NUMBER() OVER (PARTITION BY c.id ORDER BY SUM(oi.quantity) DESC) AS rank
    FROM
        order_items oi
    JOIN products p ON oi.product_id = p.id
    JOIN categories c ON p.category_id = c.id
    GROUP BY
        c.id, p.id, c.name, p.name
)
SELECT
    category_name,
    product_name,
    total_sold
FROM
    ProductSales
WHERE
    rank <= 3
ORDER BY
    category_name, rank;

